#+title: LBNE Member Web App

This django web application manages contact information about LBNE collaboration and project members.  It was written by Brett Viren (=bv@bnl.gov=), improved by Chao Zheng (=chao@bnl.gov=) and then upgraded to recent version of django and now maintained by Brett Viren.

Currently, it provides searching and browsing a database of Individuals, Institutions and Roles and can export the database in a variety of formats including plain text, LaTeX and XLS.

* Installation

Download the code to the server using one of the following git URLs:

 - read-only :: http://cdcvs.fnal.gov/projects/lbne-web
 - read-write :: =ssh://p-lbne-web@cdcvs.fnal.gov/cvs/projects/lbne-web=

The application source is under the =lbneweb/= directory.  The django project is then under =lbne/= and the following django applications exist:

 - =members/= :: collaboration/project membership

** Support packages

Obviously django is needed and in addition a few extra packages.  It's recommended to install django as a system package and the rest under a virtualenv. 

#+BEGIN_SRC sh :eval no
$ sudo apt-get install django virtualenv
$ virtualenv --system-site-packages venv
$ source venv/bin/activate
(venv)$ pip install django_extensions Werkzeug south ipython
$ deactivate
$ cd lbneweb/
$ ln -s ../venv/lib/python2.7/site-packages .
#+END_SRC

Note, the app does not run in the virtualenv explicitly but finds the packages through the symlinked directory.


** Configuration

The file =lbneweb/lbneweb.conf= must be written to tell some basic configuration items.  It should look something like:

#+BEGIN_SRC conf
[common]
secret_key = <redacted>

[database default]
name = lbneweb.sqlite3
user =
password =
host =
port =
#+END_SRC


Note a 50-character django secret key needs defining.  For sqlite3 no other info but the file named with =name= is needed, but the remaining keys must be included nonetheless.

The database can then be initialized with:

#+BEGIN_SRC sh :eval no
$ ./manage.py syncdb
#+END_SRC

** Prime the DB

The DB may need to be primed (with members).  There are scripts that *attempt* to parse the text files in DocDB 270.  They will most likely not succeed until a multitude of deviations from the expected format is cleaned up in the text files.

To start, put latest =lbneiblist.txt= and =lbnephonelist.txt= from: http://lbne2-docdb.fnal.gov:8080/cgi-bin/ShowDocument?docid=270 into =members/data/= (avoid committed these files).

The files can be tested with:

#+BEGIN_SRC sh :eval no
$ ./manage.py shell
#+END_SRC
#+BEGIN_SRC python :eval no
from members import loader
reload (loader); d = loader.Data(); d.load()
# rinse-repeat
#+END_SRC

Beat on the wound until the blood runs clear then run:

#+BEGIN_SRC sh :eval no
$ ./manage.py runscript load_members --script-args "purge roles members"
#+END_SRC

** Testing

The database can be examined interactively.  For example:

#+BEGIN_SRC sh :eval no
$ ./manage.py shell
#+END_SRC

#+BEGIN_SRC python :eval no
from members.models import *
iall = Individual.objects.all()
me = [i for i in iall if i.last_name == 'Viren'][0]
print me.begin_date
2008-05-01
#+END_SRC


* Run the server

The server is started with:

#+BEGIN_SRC sh :eval no
$ ./manage.py runserver_plus
#+END_SRC


* Create new applications

A new application is begun like:

#+BEGIN_SRC sh :eval no
$ ./manage startapp <appname>
$ emacs <appname>/models.py
$ ./manage syncdb
#+END_SRC


* Updating this file on Redmine.

This file is served by FNAL Redmine from [[https://cdcvs.fnal.gov/redmine/embedded/lbne-web/][this url]].  To update it load this file in =emacs= and do

#+BEGIN_SRC emacs
C-cC-ehh
#+END_SRC

Then copy the resulting =README.html= file to the server:

#+BEGIN_SRC sh :eval no
$ scp README.html p-lbne-web@cdcvs.fnal.gov:html/index.html
#+END_SRC

-----
